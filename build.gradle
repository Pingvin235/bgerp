apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // com.lowagie:itext:2.1.7.js6
        url "http://repo.bgerp.org/repository/maven-public"
    }
}

sourceCompatibility = '11'
targetCompatibility = '11'

// Eclipse and VS Code use bin
buildDir = 'target'

version = '3.0'

eclipse {
    classpath {
        // speed up of initial start, change if needed
        downloadJavadoc = false
        downloadSources = false
    }
}

idea {
    module {}
}

configurations {
    all {
        transitive = false
    }
    doc {
        transitive = true
    }
    bgerp
    bgerpRun.extendsFrom(bgerp)
    itest.extendsFrom(bgerp)
    tools.extendsFrom(bgerp)
    // for running inside IDE
    compile.extendsFrom(bgerp, tools, itest)
}

dependencies {
    // OpenJDK 11
    // http://qaru.site/questions/16251978/migration-jaxws-application-from-java-8-to-java-11
    // https://www.jesperdj.com/2018/09/30/jaxb-on-java-9-10-11-and-beyond/
    bgerp 'javax.xml.bind:jaxb-api:2.3.1'
    bgerp 'org.glassfish.jaxb:jaxb-runtime:2.3.1' // 2.4.0-b180830.0438
    bgerp 'javax.xml.ws:jaxws-api:2.3.1'
    bgerp 'javax.jws:javax.jws-api:1.1'
    bgerp 'com.sun.xml.ws:jaxws-rt:2.3.1'
    bgerp 'com.sun.xml.ws:rt:2.3.1'
    bgerp 'com.sun.istack:istack-commons-runtime:3.0.7'
    bgerp 'com.sun.xml.stream.buffer:streambuffer:1.5.6'
    bgerp 'com.sun.xml.ws:policy:2.7.5'
    bgerp 'org.jvnet.staxex:stax-ex:1.8'
    bgerp 'javax.xml.soap:javax.xml.soap-api:1.4.0'
    bgerp 'com.sun.xml.messaging.saaj:saaj-impl:1.5.0'
    bgerp 'org.glassfish.gmbal:gmbal-api-only:3.1.0-b001'
    bgerp 'org.jvnet.mimepull:mimepull:1.9.10'

    // библиотеки для BGERP, утилит и плагинов (добавлять после новые библиотеки)
    bgerp 'org.apache.commons:commons-lang3:3.8.1'
    bgerp 'log4j:log4j:1.2.17'
    bgerp 'org.apache.logging.log4j:log4j-api:2.11.2'

    bgerp 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.50'
    bgerp 'org.eclipse.jdt:ecj:3.26.0'
    bgerp 'org.apache.tomcat.embed:tomcat-embed-el:9.0.50'
    bgerp 'org.apache.tomcat.embed:tomcat-embed-core:9.0.51.bgerp' // TODO: Remove lib/tomcat9
    bgerp 'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.2'
    bgerp 'org.apache.taglibs:taglibs-standard-impl:1.2.5'

    bgerp 'org.apache.struts:struts-core:1.3.10'
    bgerp 'org.apache.struts:struts-extras:1.3.10'
    bgerp 'org.apache.struts:struts-taglib:1.3.10'
    bgerp 'org.apache.struts:struts-tiles:1.3.10'

    bgerp 'com.sun.mail:javax.mail:1.6.2'
    bgerp 'javax.activation:activation:1.1.1' //TODO: Fix using classes and remove library.
    bgerp 'org.apache.james:apache-mime4j-dom:0.8.5.bgerp'
    bgerp 'org.apache.james:apache-mime4j-core:0.8.5.bgerp'
    bgerp 'com.google.guava:guava:27.0.1-jre'
    bgerp 'commons-beanutils:commons-beanutils:1.9.3'
    bgerp 'commons-chain:commons-chain:1.2'
    bgerp 'commons-collections:commons-collections:3.2.2'  //bgerp 'org.apache.commons:commons-collections4:4.2'
    bgerp 'commons-dbcp:commons-dbcp:1.4'
    bgerp 'commons-digester:commons-digester:2.1' // bgerp 'org.apache.commons:commons-digester3:3.2'
    bgerp 'commons-el:commons-el:1.0'
    bgerp 'commons-fileupload:commons-fileupload:1.4'
    bgerp 'commons-io:commons-io:2.6'
    bgerp 'org.apache.commons:commons-jexl3:3.1'
    bgerp 'commons-lang:commons-lang:2.6'  // bgerp 'org.apache.commons:commons-lang3:3.8.1'
    bgerp 'commons-logging:commons-logging:1.2'
    bgerp 'commons-pool:commons-pool:1.6' // bgerp 'org.apache.commons:commons-pool2:2.6.0'
    bgerp 'commons-validator:commons-validator:1.6'
    bgerp 'ar.com.fdvs:DynamicJasper:5.1.1'
    bgerp 'org.apache.httpcomponents:fluent-hc:4.5.7'
    bgerp 'org.apache.httpcomponents:httpclient:4.5.7'
    bgerp 'org.apache.httpcomponents:httpcore:4.4.11'
    bgerp 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'
    bgerp 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    bgerp 'com.fasterxml.jackson.core:jackson-databind:2.4.1.3'
    bgerp 'net.sf.jasperreports:jasperreports:6.7.0'
    bgerpRun 'com.lowagie:itext:2.1.7.js6'
    bgerp 'org.jsoup:jsoup:1.11.3'
    bgerp 'mysql:mysql-connector-java:8.0.19'
    bgerp 'org.apache.poi:poi:4.0.1'
    bgerpRun 'org.apache.commons:commons-collections4:4.3' // required for poi
    bgerp 'xalan:xalan:2.7.1' // TODO: get rid together with XSLT
    bgerp 'xalan:serializer:2.7.1' // TODO: get rid together with XSLT
    bgerp 'net.sf.saxon:Saxon-HE:9.4' // 2.9.8 TODO: get rid together with XSLT
    bgerp 'javax.annotation:javax.annotation-api:1.3.2'
    bgerp 'org.asteriskjava:asterisk-java:3.3.0'
    bgerp 'org.reflections:reflections:0.9.12' // required for asteriskjava
    bgerp 'org.javassist:javassist:3.27.0-GA' // required for asteriskjava
    bgerp 'com.itextpdf:itextpdf:5.5.13'
    bgerp 'org.bouncycastle:bcprov-jdk15on:1.68' // license
    bgerp 'org.bouncycastle:bcpkix-jdk15on:1.68'
    bgerp 'com.hierynomus:sshj:0.30.0'
    bgerp 'org.slf4j:slf4j-api:1.7.30'
    bgerp 'org.slf4j:slf4j-log4j12:1.7.30'
    bgerp 'net.i2p.crypto:eddsa:0.3.0'

    // Telegram
    bgerp 'org.telegram:telegrambots:4.2'
    bgerp 'org.telegram:telegrambots-meta:4.2'
    bgerp 'aopalliance:aopalliance:1.0'
    bgerp 'org.json:json:20180813'
    bgerp 'com.google.guava:failureaccess:1.0.1'
    bgerp 'com.google.inject:guice:4.2.2'
    bgerp 'javax.inject:javax.inject:1'

    // библиотеки, сохранённые в проекте (старый подход, больше не добавлять)
    bgerp fileTree(dir: 'lib', include: ['*.jar'])

    // documentation library
    doc 'org.pzdcdoc:pzdcdoc:2.3'

    // unit tests of the main code
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'

    // integration test
    itest 'org.testng:testng:7.1.0'
    itest 'com.beust:jcommander:1.72'
    itest 'org.seleniumhq.selenium:selenium-java:3.141.59'
    itest 'org.seleniumhq.selenium:selenium-api:3.141.59'
    itest 'org.seleniumhq.selenium:selenium-remote-driver:3.141.59'
    itest 'org.seleniumhq.selenium:selenium-support:3.141.59'
    itest 'org.seleniumhq.selenium:selenium-chrome-driver:3.141.59'
    itest 'com.squareup.okhttp3:okhttp:3.13.1'
    itest 'org.jetbrains.kotlin:kotlin-stdlib:1.3.21'
    itest 'com.squareup.okio:okio:2.2.2'
    itest 'net.bytebuddy:byte-buddy:1.9.10'
    itest 'org.apache.commons:commons-exec:1.3'
}

// called from ant build/update_lib/build.xml
task copyLibExt(type: Copy) {
    into "$buildDir/lib"
    from configurations.bgerpRun
}

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'dyn'
            srcDir 'custom/src'
        }
        resources {
            srcDir 'src'
            srcDir 'custom/src'
        }
        // makes warning on assigning simple output.classesDir
        output.resourcesDir = "${buildDir}/classes/java/main"
        compileClasspath = configurations.bgerp
        runtimeClasspath = output + configurations.bgerpRun
    }
    test {
        java {
            srcDir 'srcx/test'
        }
        resources {
            srcDir 'srcx/test'
        }
    }
    tools {
        java {
            srcDir 'srcx/tools'
        }
        compileClasspath = configurations.tools + sourceSets.main.output
        runtimeClasspath = output + compileClasspath
    }
    itest {
        java {
            srcDir 'srcx/itest'
        }
        resources {
            srcDir 'srcx/itest'
        }
        // makes warning on assigning simple output.classesDir
        output.resourcesDir = "${buildDir}/classes/java/itest"
        compileClasspath = configurations.itest + sourceSets.main.output
        runtimeClasspath = output + compileClasspath
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task buildDoc(type: JavaExec) {
    classpath =  configurations.doc
    main = 'org.pzdcdoc.DocGenerator'
    args 'NOTUSED', 'srcx/doc', 'target/doc'
}

task buildJavaDoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    failOnError = false
    classpath = configurations.bgerp
    source = sourceSets.main.allJava
    destinationDir = file("${buildDir}/javadoc")
}

task patchChanges(type: JavaExec, dependsOn: 'compileToolsJava') {
    classpath =  sourceSets.tools.runtimeClasspath
    main = 'ru.bgerp.tool.PatchChanges'
    args "${->getBuild()}", 'build/changes.txt'
}

def getBuild() {
    def buildProperties = new Properties()
    file("$projectDir/build/update/update.properties").withInputStream { stream -> buildProperties.load(stream) }
    def build = buildProperties.get('build.number')
    println "Build: $build"
    return build
}

task rss(type: JavaExec, dependsOn: 'compileToolsJava') {
    mustRunAfter 'patchChanges'
    classpath =  sourceSets.tools.runtimeClasspath
    main = 'ru.bgerp.tool.RssGenerator'
    args version, 'build/changes.txt', 'build/changes.xml'
}

task buildDist(type: Exec, dependsOn: 'classes', description: 'Builds distribution archive') {
    workingDir "$projectDir/build/bgerp"
    commandLine "ant"
    environment classesPath: "../../target/classes/java/main"
}

task buildUpdate(type: Exec, dependsOn: 'classes', description: 'Builds distribution and update archives') {
    workingDir "$projectDir/build/update"
    commandLine "ant"
    environment classesPath: "../../target/classes/java/main"
}

task buildUpdateLib(type: Exec, description: 'Builds library update archive if exists file build/changes.lib.txt') {
    onlyIf {
        file("build/changes.lib.txt").exists()
    }
    workingDir "$projectDir/build/update_lib"
    commandLine "ant"
}

task buildUpdateLibForce(type: Exec, description: 'Builds library update archive') {
    workingDir "$projectDir/build/update_lib"
    commandLine "ant"
}

task buildClean(type: Delete) {
    delete fileTree("$projectDir/build").matching {
        include "bgerp/bgerp_${version}_*.zip"
        include "update/update_${version}_*.zip"
        include "update_lib/update_lib_${version}_*.zip"
    }
}

task resetProperties {
    doFirst {
        println "Reset update.properties"
        "git checkout -- $projectDir/build/update/update.properties".execute()
        println "Reset update_lib.properties"
        "git checkout -- $projectDir/build/update_lib/update_lib.properties".execute()
    }
}

task touchChanges(description: "Creates file 'build/changes.<PROCESS_ID>.txt' if missing") {
    doFirst {
        def processId = getProcessId()
        def changesFile = file("$projectDir/build/changes.${processId}.txt")
        if (!changesFile.exists())
            changesFile.text = ""
    }
}

task touchChangesLib(description: "Creates file 'build/changes.lib.txt' if missing") {
    doFirst {
        def changesLibFile = file("$projectDir/build/changes.lib.txt")
        if (!changesLibFile.exists())
            changesLibFile.text = ""
    }
}

task checkChanges(description: 'Checks existance of build/changes.<PROCESS_ID>.txt file') {
    doFirst {
        def processId = getProcessId()
        def changesFileName = "build/changes.${processId}.txt"
        def changesFile = file("$projectDir/$changesFileName")
        if (!changesFile.exists() || changesFile.text.isBlank())
            throw new GradleException("Changes file '$changesFileName' not found or blank. Create it using './gradlew touchChanges' and fill out.")
        
    }
}

def getChangesFileName() {
     def processId = getProcessId()
        def changesFile = file("$projectDir/build/changes.${processId}.txt")
}

def getProcessId() {
    def branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    println "Branch name: $branchName"

    def m  = branchName =~ /^p(\d+)\-/
    if (!m) throw new GradleException("Incorrect branch name: $branchName")

    def processId = m[0][1]
    println "Process ID: $processId"

    return processId
}

apply from: "build/publish.gradle"

task startServer(type: JavaExec, dependsOn: 'classes', description: 'Starts server with bgerp.properties') {
    classpath =  sourceSets.main.runtimeClasspath
    main = 'ru.bgerp.Server'
    args 'start'
    systemProperties = [
        'bgerp.setup.data': findProperty('bgerp.setup.data') ?: 'bgerp',
        'java.net.preferIPv4Stack': true
    ]
}

task licSign(type: JavaExec, dependsOn: 'classes', description: 'Sign a license file') {
    classpath =  sourceSets.main.runtimeClasspath
    main = 'ru.bgcrm.plugin.License'
    args"${->findProperty('lic.path')}", "${->findProperty('signer.id')}",
        "${->findProperty('key.path')}", "${->findProperty('key.pswd')}"
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = "full"
        events "passed", "skipped", "failed"
    }
    outputs.upToDateWhen {false}
}

/*
    Complete run:
        gradlew itest -Pdb.user=* -Pdb.pswd=* -Pdb.host=localhost
    Only wanted groups with dependencies:
        -Pgroups.include=initUsers
    Skip heavy DB reset:
        -Pskip.dbReset=true
*/
task itest(type: Test, description: 'Integration tests') {
    // failFast = true SQL logs are not visible

    useTestNG() {
        def propInclude = findProperty("groups.include")
        if (propInclude) {
            includeGroups propInclude
        }
    }
    classpath = sourceSets.itest.runtimeClasspath
    testClassesDirs = sourceSets.itest.output.classesDirs
    testLogging {
        showStandardStreams = true
        exceptionFormat = "full"
        events "passed", "skipped", "failed"
    }
    outputs.upToDateWhen {false}

    systemProperty "db.host", findProperty("db.host")
    systemProperty "db.user", findProperty("db.user")
    systemProperty "db.pswd", findProperty("db.pswd")
    systemProperty "webdriver.chrome.driver", findProperty("webdriver.chrome.driver")
    systemProperty "skip.dbReset", findProperty("skip.dbReset")
}

task integrationTest(dependsOn: 'itest', description: 'Backward compatible name for itest') {
    doFirst {
        logger.warn("Use 'itest' task")
    }
}
